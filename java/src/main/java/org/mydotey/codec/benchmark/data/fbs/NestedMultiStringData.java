// automatically generated by the FlatBuffers compiler, do not modify

package org.mydotey.codec.benchmark.data.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NestedMultiStringData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static NestedMultiStringData getRootAsNestedMultiStringData(ByteBuffer _bb) { return getRootAsNestedMultiStringData(_bb, new NestedMultiStringData()); }
  public static NestedMultiStringData getRootAsNestedMultiStringData(ByteBuffer _bb, NestedMultiStringData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NestedMultiStringData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public org.mydotey.codec.benchmark.data.fbs.MultiStringData fMultiString() { return fMultiString(new org.mydotey.codec.benchmark.data.fbs.MultiStringData()); }
  public org.mydotey.codec.benchmark.data.fbs.MultiStringData fMultiString(org.mydotey.codec.benchmark.data.fbs.MultiStringData obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public org.mydotey.codec.benchmark.data.fbs.NestedMultiStringData fNested() { return fNested(new org.mydotey.codec.benchmark.data.fbs.NestedMultiStringData()); }
  public org.mydotey.codec.benchmark.data.fbs.NestedMultiStringData fNested(org.mydotey.codec.benchmark.data.fbs.NestedMultiStringData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createNestedMultiStringData(FlatBufferBuilder builder,
      int fMultiStringOffset,
      int fNestedOffset) {
    builder.startTable(2);
    NestedMultiStringData.addFNested(builder, fNestedOffset);
    NestedMultiStringData.addFMultiString(builder, fMultiStringOffset);
    return NestedMultiStringData.endNestedMultiStringData(builder);
  }

  public static void startNestedMultiStringData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFMultiString(FlatBufferBuilder builder, int fMultiStringOffset) { builder.addOffset(0, fMultiStringOffset, 0); }
  public static void addFNested(FlatBufferBuilder builder, int fNestedOffset) { builder.addOffset(1, fNestedOffset, 0); }
  public static int endNestedMultiStringData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

