// automatically generated by the FlatBuffers compiler, do not modify

package org.mydotey.codec.benchmark.data.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NestedMultiListFixedData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static NestedMultiListFixedData getRootAsNestedMultiListFixedData(ByteBuffer _bb) { return getRootAsNestedMultiListFixedData(_bb, new NestedMultiListFixedData()); }
  public static NestedMultiListFixedData getRootAsNestedMultiListFixedData(ByteBuffer _bb, NestedMultiListFixedData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NestedMultiListFixedData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public org.mydotey.codec.benchmark.data.fbs.MultiListFixedData fMultiList() { return fMultiList(new org.mydotey.codec.benchmark.data.fbs.MultiListFixedData()); }
  public org.mydotey.codec.benchmark.data.fbs.MultiListFixedData fMultiList(org.mydotey.codec.benchmark.data.fbs.MultiListFixedData obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public org.mydotey.codec.benchmark.data.fbs.NestedMultiListFixedData fNested() { return fNested(new org.mydotey.codec.benchmark.data.fbs.NestedMultiListFixedData()); }
  public org.mydotey.codec.benchmark.data.fbs.NestedMultiListFixedData fNested(org.mydotey.codec.benchmark.data.fbs.NestedMultiListFixedData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createNestedMultiListFixedData(FlatBufferBuilder builder,
      int fMultiListOffset,
      int fNestedOffset) {
    builder.startTable(2);
    NestedMultiListFixedData.addFNested(builder, fNestedOffset);
    NestedMultiListFixedData.addFMultiList(builder, fMultiListOffset);
    return NestedMultiListFixedData.endNestedMultiListFixedData(builder);
  }

  public static void startNestedMultiListFixedData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFMultiList(FlatBufferBuilder builder, int fMultiListOffset) { builder.addOffset(0, fMultiListOffset, 0); }
  public static void addFNested(FlatBufferBuilder builder, int fNestedOffset) { builder.addOffset(1, fNestedOffset, 0); }
  public static int endNestedMultiListFixedData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

