// automatically generated by the FlatBuffers compiler, do not modify

package org.mydotey.codec.benchmark.data.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NestedUnfixedData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static NestedUnfixedData getRootAsNestedUnfixedData(ByteBuffer _bb) { return getRootAsNestedUnfixedData(_bb, new NestedUnfixedData()); }
  public static NestedUnfixedData getRootAsNestedUnfixedData(ByteBuffer _bb, NestedUnfixedData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NestedUnfixedData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public org.mydotey.codec.benchmark.data.fbs.UnfixedData fUnfixed() { return fUnfixed(new org.mydotey.codec.benchmark.data.fbs.UnfixedData()); }
  public org.mydotey.codec.benchmark.data.fbs.UnfixedData fUnfixed(org.mydotey.codec.benchmark.data.fbs.UnfixedData obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public org.mydotey.codec.benchmark.data.fbs.NestedUnfixedData fNested() { return fNested(new org.mydotey.codec.benchmark.data.fbs.NestedUnfixedData()); }
  public org.mydotey.codec.benchmark.data.fbs.NestedUnfixedData fNested(org.mydotey.codec.benchmark.data.fbs.NestedUnfixedData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createNestedUnfixedData(FlatBufferBuilder builder,
      int fUnfixedOffset,
      int fNestedOffset) {
    builder.startTable(2);
    NestedUnfixedData.addFNested(builder, fNestedOffset);
    NestedUnfixedData.addFUnfixed(builder, fUnfixedOffset);
    return NestedUnfixedData.endNestedUnfixedData(builder);
  }

  public static void startNestedUnfixedData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFUnfixed(FlatBufferBuilder builder, int fUnfixedOffset) { builder.addOffset(0, fUnfixedOffset, 0); }
  public static void addFNested(FlatBufferBuilder builder, int fNestedOffset) { builder.addOffset(1, fNestedOffset, 0); }
  public static int endNestedUnfixedData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

