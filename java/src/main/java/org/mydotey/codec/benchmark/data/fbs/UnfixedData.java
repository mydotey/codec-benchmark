// automatically generated by the FlatBuffers compiler, do not modify

package org.mydotey.codec.benchmark.data.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UnfixedData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static UnfixedData getRootAsUnfixedData(ByteBuffer _bb) { return getRootAsUnfixedData(_bb, new UnfixedData()); }
  public static UnfixedData getRootAsUnfixedData(ByteBuffer _bb, UnfixedData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UnfixedData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte fByte() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public short fShort() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int fInt() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long fLong() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float fFloat() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public double fDouble() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean fBool() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public byte fEnum() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String fString() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fStringAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer fStringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public byte fListByte(int j) { int o = __offset(22); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int fListByteLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer fListByteAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer fListByteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  public int fListInt(int j) { int o = __offset(24); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int fListIntLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer fListIntAsByteBuffer() { return __vector_as_bytebuffer(24, 4); }
  public ByteBuffer fListIntInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 4); }
  public byte fListBool(int j) { int o = __offset(26); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int fListBoolLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer fListBoolAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer fListBoolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  public byte fListEnum(int j) { int o = __offset(28); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int fListEnumLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer fListEnumAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer fListEnumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  public String fListString(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int fListStringLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public org.mydotey.codec.benchmark.data.fbs.FixedData fListFixed(int j) { return fListFixed(new org.mydotey.codec.benchmark.data.fbs.FixedData(), j); }
  public org.mydotey.codec.benchmark.data.fbs.FixedData fListFixed(org.mydotey.codec.benchmark.data.fbs.FixedData obj, int j) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o) + j * 40, bb) : null; }
  public int fListFixedLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public org.mydotey.codec.benchmark.data.fbs.UnfixedData fListUnfixed(int j) { return fListUnfixed(new org.mydotey.codec.benchmark.data.fbs.UnfixedData(), j); }
  public org.mydotey.codec.benchmark.data.fbs.UnfixedData fListUnfixed(org.mydotey.codec.benchmark.data.fbs.UnfixedData obj, int j) { int o = __offset(34); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fListUnfixedLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }

  public static int createUnfixedData(FlatBufferBuilder builder,
      byte fByte,
      short fShort,
      int fInt,
      long fLong,
      float fFloat,
      double fDouble,
      boolean fBool,
      byte fEnum,
      int fStringOffset,
      int fListByteOffset,
      int fListIntOffset,
      int fListBoolOffset,
      int fListEnumOffset,
      int fListStringOffset,
      int fListFixedOffset,
      int fListUnfixedOffset) {
    builder.startTable(16);
    UnfixedData.addFDouble(builder, fDouble);
    UnfixedData.addFLong(builder, fLong);
    UnfixedData.addFListUnfixed(builder, fListUnfixedOffset);
    UnfixedData.addFListFixed(builder, fListFixedOffset);
    UnfixedData.addFListString(builder, fListStringOffset);
    UnfixedData.addFListEnum(builder, fListEnumOffset);
    UnfixedData.addFListBool(builder, fListBoolOffset);
    UnfixedData.addFListInt(builder, fListIntOffset);
    UnfixedData.addFListByte(builder, fListByteOffset);
    UnfixedData.addFString(builder, fStringOffset);
    UnfixedData.addFFloat(builder, fFloat);
    UnfixedData.addFInt(builder, fInt);
    UnfixedData.addFShort(builder, fShort);
    UnfixedData.addFEnum(builder, fEnum);
    UnfixedData.addFBool(builder, fBool);
    UnfixedData.addFByte(builder, fByte);
    return UnfixedData.endUnfixedData(builder);
  }

  public static void startUnfixedData(FlatBufferBuilder builder) { builder.startTable(16); }
  public static void addFByte(FlatBufferBuilder builder, byte fByte) { builder.addByte(0, fByte, 0); }
  public static void addFShort(FlatBufferBuilder builder, short fShort) { builder.addShort(1, fShort, 0); }
  public static void addFInt(FlatBufferBuilder builder, int fInt) { builder.addInt(2, fInt, 0); }
  public static void addFLong(FlatBufferBuilder builder, long fLong) { builder.addLong(3, fLong, 0L); }
  public static void addFFloat(FlatBufferBuilder builder, float fFloat) { builder.addFloat(4, fFloat, 0.0f); }
  public static void addFDouble(FlatBufferBuilder builder, double fDouble) { builder.addDouble(5, fDouble, 0.0); }
  public static void addFBool(FlatBufferBuilder builder, boolean fBool) { builder.addBoolean(6, fBool, false); }
  public static void addFEnum(FlatBufferBuilder builder, byte fEnum) { builder.addByte(7, fEnum, 0); }
  public static void addFString(FlatBufferBuilder builder, int fStringOffset) { builder.addOffset(8, fStringOffset, 0); }
  public static void addFListByte(FlatBufferBuilder builder, int fListByteOffset) { builder.addOffset(9, fListByteOffset, 0); }
  public static int createFListByteVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startFListByteVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addFListInt(FlatBufferBuilder builder, int fListIntOffset) { builder.addOffset(10, fListIntOffset, 0); }
  public static int createFListIntVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startFListIntVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFListBool(FlatBufferBuilder builder, int fListBoolOffset) { builder.addOffset(11, fListBoolOffset, 0); }
  public static int createFListBoolVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startFListBoolVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addFListEnum(FlatBufferBuilder builder, int fListEnumOffset) { builder.addOffset(12, fListEnumOffset, 0); }
  public static int createFListEnumVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startFListEnumVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addFListString(FlatBufferBuilder builder, int fListStringOffset) { builder.addOffset(13, fListStringOffset, 0); }
  public static int createFListStringVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFListStringVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFListFixed(FlatBufferBuilder builder, int fListFixedOffset) { builder.addOffset(14, fListFixedOffset, 0); }
  public static void startFListFixedVector(FlatBufferBuilder builder, int numElems) { builder.startVector(40, numElems, 8); }
  public static void addFListUnfixed(FlatBufferBuilder builder, int fListUnfixedOffset) { builder.addOffset(15, fListUnfixedOffset, 0); }
  public static int createFListUnfixedVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFListUnfixedVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endUnfixedData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

