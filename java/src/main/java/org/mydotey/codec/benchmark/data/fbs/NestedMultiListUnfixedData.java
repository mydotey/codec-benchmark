// automatically generated by the FlatBuffers compiler, do not modify

package org.mydotey.codec.benchmark.data.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NestedMultiListUnfixedData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static NestedMultiListUnfixedData getRootAsNestedMultiListUnfixedData(ByteBuffer _bb) { return getRootAsNestedMultiListUnfixedData(_bb, new NestedMultiListUnfixedData()); }
  public static NestedMultiListUnfixedData getRootAsNestedMultiListUnfixedData(ByteBuffer _bb, NestedMultiListUnfixedData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NestedMultiListUnfixedData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public org.mydotey.codec.benchmark.data.fbs.MultiListUnfixedData fMultiList() { return fMultiList(new org.mydotey.codec.benchmark.data.fbs.MultiListUnfixedData()); }
  public org.mydotey.codec.benchmark.data.fbs.MultiListUnfixedData fMultiList(org.mydotey.codec.benchmark.data.fbs.MultiListUnfixedData obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public org.mydotey.codec.benchmark.data.fbs.NestedMultiListUnfixedData fNested() { return fNested(new org.mydotey.codec.benchmark.data.fbs.NestedMultiListUnfixedData()); }
  public org.mydotey.codec.benchmark.data.fbs.NestedMultiListUnfixedData fNested(org.mydotey.codec.benchmark.data.fbs.NestedMultiListUnfixedData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createNestedMultiListUnfixedData(FlatBufferBuilder builder,
      int fMultiListOffset,
      int fNestedOffset) {
    builder.startTable(2);
    NestedMultiListUnfixedData.addFNested(builder, fNestedOffset);
    NestedMultiListUnfixedData.addFMultiList(builder, fMultiListOffset);
    return NestedMultiListUnfixedData.endNestedMultiListUnfixedData(builder);
  }

  public static void startNestedMultiListUnfixedData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFMultiList(FlatBufferBuilder builder, int fMultiListOffset) { builder.addOffset(0, fMultiListOffset, 0); }
  public static void addFNested(FlatBufferBuilder builder, int fNestedOffset) { builder.addOffset(1, fNestedOffset, 0); }
  public static int endNestedMultiListUnfixedData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

